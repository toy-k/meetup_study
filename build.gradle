import java.nio.file.Files
import java.nio.file.Paths

plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.10'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id 'jacoco'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}
dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-web-services'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-batch'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.mysql:mysql-connector-j'
    runtimeOnly 'com.h2database:h2'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    implementation 'com.auth0:java-jwt:4.2.1'
    implementation 'io.jsonwebtoken:jjwt:0.9.1'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
}

tasks.named('test') {
    doFirst {
        def testEnvPath = 'src/test/resources/.env'
        if (Files.exists(Paths.get(testEnvPath))) {
            Properties props = new Properties()
            props.load(new FileInputStream(testEnvPath))

            props.each { key, value ->
                println(key.toString())
                println(value.toString())
                if(key.toString() == 'GOOGLE_CLIENT_ID'){
                    environment key.toString(), value.toString()
                }else{
                    systemProperty key.toString(), value.toString()
                }
            }
        }
    }
    useJUnitPlatform()
}

test{
    finalizedBy 'jacocoTestReport'
}

jacoco {
    toolVersion = "0.8.7"
}


jacocoTestReport {
    reports {
        html.enabled false
        csv.enabled false
        xml.enabled false
    }
    finalizedBy 'jacocoTestCoverageVerification'
}


jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true
            element = 'CLASS'

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.0
            }

            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.0
            }

            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 1000
            }

            //excludes = []
        }

    }
}

